package org.eda2.practica01;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

/**
 * DividAndConquerTest
 * 
 * Clase generada para la realizacion de los juegos de pruebas para comprobar el
 * correcto funcionamiento de los algoritmos
 * de la practica 01.
 * 
 * @author Adrian Jimenez Benitez
 * @author Antonio Jose Jimenez Luque
 */
class DivideAndConquerTest {

    /**
     * Caso 1 - Simplificacion
     */
    @Test
    public void testCaso1Base() {
        // Caso base: 2 jugadores
        DivideAndConquer dyv = new DivideAndConquer(2,1);
        dyv.DivideAndConquer1(2);

        int[][] resultadoEsperado = { { 2 },
                { 1 } };
        int[][] resultadoObtenido = dyv.getTabla();

        assertArrayEquals(resultadoEsperado, resultadoObtenido);
    }

    @Test
    public void testCaso1ConCuatroJugadores() {
        // Caso con 4 jugadores
        DivideAndConquer dyv = new DivideAndConquer(4,1);
        dyv.DivideAndConquer1(4);

        int[][] resultadoEsperado = {
                { 2, 3, 4 },
                { 1, 4, 3 },
                { 4, 1, 2 },
                { 3, 2, 1 }
        };

        imprimirTabla(dyv.getTabla());

        assertArrayEquals(resultadoEsperado, dyv.getTabla());
    }

    @Test
    public void testCaso1ConOchoJugadores() {
        DivideAndConquer dyv = new DivideAndConquer(8,1);
        dyv.DivideAndConquer1(8);

        int[][] expected = {
                { 2, 3, 4, 5, 6, 7, 8 },
                { 1, 4, 3, 6, 7, 8, 5 },
                { 4, 1, 2, 7, 8, 5, 6 },
                { 3, 2, 1, 8, 5, 6, 7 },
                { 6, 7, 8, 1, 4, 3, 2 },
                { 5, 8, 7, 2, 1, 4, 3 },
                { 8, 5, 6, 3, 2, 1, 4 },
                { 7, 6, 5, 4, 3, 2, 1 }
        };

        assertArrayEquals(expected, dyv.getTabla());
    }

    @Test
    public void testCaso1ConDieciseisJugadores() {
        DivideAndConquer dyv = new DivideAndConquer(16,1);
        dyv.DivideAndConquer1(16);

        int[][] expected = {
                { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, },
                { 1, 4, 3, 6, 7, 8, 5, 10, 11, 12, 13, 14, 15, 16, 9, },
                { 4, 1, 2, 7, 8, 5, 6, 11, 12, 13, 14, 15, 16, 9, 10, },
                { 3, 2, 1, 8, 5, 6, 7, 12, 13, 14, 15, 16, 9, 10, 11, },
                { 6, 7, 8, 1, 4, 3, 2, 13, 14, 15, 16, 9, 10, 11, 12, },
                { 5, 8, 7, 2, 1, 4, 3, 14, 15, 16, 9, 10, 11, 12, 13, },
                { 8, 5, 6, 3, 2, 1, 4, 15, 16, 9, 10, 11, 12, 13, 14, },
                { 7, 6, 5, 4, 3, 2, 1, 16, 9, 10, 11, 12, 13, 14, 15, },
                { 10, 11, 12, 13, 14, 15, 16, 1, 8, 7, 6, 5, 4, 3, 2, },
                { 9, 12, 11, 14, 15, 16, 13, 2, 1, 8, 7, 6, 5, 4, 3, },
                { 12, 9, 10, 15, 16, 13, 14, 3, 2, 1, 8, 7, 6, 5, 4, },
                { 11, 10, 9, 16, 13, 14, 15, 4, 3, 2, 1, 8, 7, 6, 5, },
                { 14, 15, 16, 9, 12, 11, 10, 5, 4, 3, 2, 1, 8, 7, 6, },
                { 13, 16, 15, 10, 9, 12, 11, 6, 5, 4, 3, 2, 1, 8, 7, },
                { 16, 13, 14, 11, 10, 9, 12, 7, 6, 5, 4, 3, 2, 1, 8, },
                { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, }
        };

        assertArrayEquals(expected, dyv.getTabla());
    }

    @Test
    public void testCaso1ConSesentayCuatroJugadores() {
        DivideAndConquer dyv = new DivideAndConquer(64,1);
        dyv.DivideAndConquer1(64);

        int[][] expected = {
                { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                        29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
                        53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, },
                { 1, 4, 3, 6, 7, 8, 5, 10, 11, 12, 13, 14, 15, 16, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
                        30, 31, 32, 17, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 33, },
                { 4, 1, 2, 7, 8, 5, 6, 11, 12, 13, 14, 15, 16, 9, 10, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                        31, 32, 17, 18, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 33, 34, },
                { 3, 2, 1, 8, 5, 6, 7, 12, 13, 14, 15, 16, 9, 10, 11, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                        32, 17, 18, 19, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
                        56, 57, 58, 59, 60, 61, 62, 63, 64, 33, 34, 35, },
                { 6, 7, 8, 1, 4, 3, 2, 13, 14, 15, 16, 9, 10, 11, 12, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
                        17, 18, 19, 20, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
                        57, 58, 59, 60, 61, 62, 63, 64, 33, 34, 35, 36, },
                { 5, 8, 7, 2, 1, 4, 3, 14, 15, 16, 9, 10, 11, 12, 13, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 17,
                        18, 19, 20, 21, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
                        58, 59, 60, 61, 62, 63, 64, 33, 34, 35, 36, 37, },
                { 8, 5, 6, 3, 2, 1, 4, 15, 16, 9, 10, 11, 12, 13, 14, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 17, 18,
                        19, 20, 21, 22, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
                        59, 60, 61, 62, 63, 64, 33, 34, 35, 36, 37, 38, },
                { 7, 6, 5, 4, 3, 2, 1, 16, 9, 10, 11, 12, 13, 14, 15, 24, 25, 26, 27, 28, 29, 30, 31, 32, 17, 18, 19,
                        20, 21, 22, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                        60, 61, 62, 63, 64, 33, 34, 35, 36, 37, 38, 39, },
                { 10, 11, 12, 13, 14, 15, 16, 1, 8, 7, 6, 5, 4, 3, 2, 25, 26, 27, 28, 29, 30, 31, 32, 17, 18, 19, 20,
                        21, 22, 23, 24, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
                        61, 62, 63, 64, 33, 34, 35, 36, 37, 38, 39, 40, },
                { 9, 12, 11, 14, 15, 16, 13, 2, 1, 8, 7, 6, 5, 4, 3, 26, 27, 28, 29, 30, 31, 32, 17, 18, 19, 20, 21, 22,
                        23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
                        63, 64, 33, 34, 35, 36, 37, 38, 39, 40, 41, },
                { 12, 9, 10, 15, 16, 13, 14, 3, 2, 1, 8, 7, 6, 5, 4, 27, 28, 29, 30, 31, 32, 17, 18, 19, 20, 21, 22, 23,
                        24, 25, 26, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
                        64, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, },
                { 11, 10, 9, 16, 13, 14, 15, 4, 3, 2, 1, 8, 7, 6, 5, 28, 29, 30, 31, 32, 17, 18, 19, 20, 21, 22, 23, 24,
                        25, 26, 27, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
                        33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, },
                { 14, 15, 16, 9, 12, 11, 10, 5, 4, 3, 2, 1, 8, 7, 6, 29, 30, 31, 32, 17, 18, 19, 20, 21, 22, 23, 24, 25,
                        26, 27, 28, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 33,
                        34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, },
                { 13, 16, 15, 10, 9, 12, 11, 6, 5, 4, 3, 2, 1, 8, 7, 30, 31, 32, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
                        27, 28, 29, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 33, 34,
                        35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, },
                { 16, 13, 14, 11, 10, 9, 12, 7, 6, 5, 4, 3, 2, 1, 8, 31, 32, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
                        28, 29, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 33, 34, 35,
                        36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, },
                { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 32, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                        29, 30, 31, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 33, 34, 35, 36,
                        37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, },
                { 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 1, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6,
                        5, 4, 3, 2, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 33, 34, 35, 36, 37,
                        38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, },
                { 17, 20, 19, 22, 23, 24, 21, 26, 27, 28, 29, 30, 31, 32, 25, 2, 1, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7,
                        6, 5, 4, 3, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 33, 34, 35, 36, 37, 38,
                        39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, },
                { 20, 17, 18, 23, 24, 21, 22, 27, 28, 29, 30, 31, 32, 25, 26, 3, 2, 1, 16, 15, 14, 13, 12, 11, 10, 9, 8,
                        7, 6, 5, 4, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 33, 34, 35, 36, 37, 38, 39,
                        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, },
                { 19, 18, 17, 24, 21, 22, 23, 28, 29, 30, 31, 32, 25, 26, 27, 4, 3, 2, 1, 16, 15, 14, 13, 12, 11, 10, 9,
                        8, 7, 6, 5, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 33, 34, 35, 36, 37, 38, 39, 40,
                        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, },
                { 22, 23, 24, 17, 20, 19, 18, 29, 30, 31, 32, 25, 26, 27, 28, 5, 4, 3, 2, 1, 16, 15, 14, 13, 12, 11, 10,
                        9, 8, 7, 6, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 33, 34, 35, 36, 37, 38, 39, 40, 41,
                        42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, },
                { 21, 24, 23, 18, 17, 20, 19, 30, 31, 32, 25, 26, 27, 28, 29, 6, 5, 4, 3, 2, 1, 16, 15, 14, 13, 12, 11,
                        10, 9, 8, 7, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
                        43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, },
                { 24, 21, 22, 19, 18, 17, 20, 31, 32, 25, 26, 27, 28, 29, 30, 7, 6, 5, 4, 3, 2, 1, 16, 15, 14, 13, 12,
                        11, 10, 9, 8, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
                        43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, },
                { 23, 22, 21, 20, 19, 18, 17, 32, 25, 26, 27, 28, 29, 30, 31, 8, 7, 6, 5, 4, 3, 2, 1, 16, 15, 14, 13,
                        12, 11, 10, 9, 56, 57, 58, 59, 60, 61, 62, 63, 64, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
                        44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, },
                { 26, 27, 28, 29, 30, 31, 32, 17, 24, 23, 22, 21, 20, 19, 18, 9, 8, 7, 6, 5, 4, 3, 2, 1, 16, 15, 14, 13,
                        12, 11, 10, 57, 58, 59, 60, 61, 62, 63, 64, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
                        46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, },
                { 25, 28, 27, 30, 31, 32, 29, 18, 17, 24, 23, 22, 21, 20, 19, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 16, 15, 14,
                        13, 12, 11, 58, 59, 60, 61, 62, 63, 64, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
                        47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, },
                { 28, 25, 26, 31, 32, 29, 30, 19, 18, 17, 24, 23, 22, 21, 20, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 16, 15,
                        14, 13, 12, 59, 60, 61, 62, 63, 64, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
                        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, },
                { 27, 26, 25, 32, 29, 30, 31, 20, 19, 18, 17, 24, 23, 22, 21, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 16,
                        15, 14, 13, 60, 61, 62, 63, 64, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                        49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, },
                { 30, 31, 32, 25, 28, 27, 26, 21, 20, 19, 18, 17, 24, 23, 22, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1,
                        16, 15, 14, 61, 62, 63, 64, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                        50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, },
                { 29, 32, 31, 26, 25, 28, 27, 22, 21, 20, 19, 18, 17, 24, 23, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3,
                        2, 1, 16, 15, 62, 63, 64, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                        50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, },
                { 32, 29, 30, 27, 26, 25, 28, 23, 22, 21, 20, 19, 18, 17, 24, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4,
                        3, 2, 1, 16, 63, 64, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
                        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, },
                { 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5,
                        4, 3, 2, 1, 64, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
                        53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, },
                { 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
                        59, 60, 61, 62, 63, 64, 1, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,
                        15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, },
                { 33, 36, 35, 38, 39, 40, 37, 42, 43, 44, 45, 46, 47, 48, 41, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                        60, 61, 62, 63, 64, 49, 2, 1, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,
                        16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, },
                { 36, 33, 34, 39, 40, 37, 38, 43, 44, 45, 46, 47, 48, 41, 42, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
                        61, 62, 63, 64, 49, 50, 3, 2, 1, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,
                        16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, },
                { 35, 34, 33, 40, 37, 38, 39, 44, 45, 46, 47, 48, 41, 42, 43, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
                        62, 63, 64, 49, 50, 51, 4, 3, 2, 1, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18,
                        17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, },
                { 38, 39, 40, 33, 36, 35, 34, 45, 46, 47, 48, 41, 42, 43, 44, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
                        63, 64, 49, 50, 51, 52, 5, 4, 3, 2, 1, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19,
                        18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, },
                { 37, 40, 39, 34, 33, 36, 35, 46, 47, 48, 41, 42, 43, 44, 45, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
                        64, 49, 50, 51, 52, 53, 6, 5, 4, 3, 2, 1, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20,
                        19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, },
                { 40, 37, 38, 35, 34, 33, 36, 47, 48, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
                        49, 50, 51, 52, 53, 54, 7, 6, 5, 4, 3, 2, 1, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20,
                        19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, },
                { 39, 38, 37, 36, 35, 34, 33, 48, 41, 42, 43, 44, 45, 46, 47, 56, 57, 58, 59, 60, 61, 62, 63, 64, 49,
                        50, 51, 52, 53, 54, 55, 8, 7, 6, 5, 4, 3, 2, 1, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21,
                        20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, },
                { 42, 43, 44, 45, 46, 47, 48, 33, 40, 39, 38, 37, 36, 35, 34, 57, 58, 59, 60, 61, 62, 63, 64, 49, 50,
                        51, 52, 53, 54, 55, 56, 9, 8, 7, 6, 5, 4, 3, 2, 1, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22,
                        21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, },
                { 41, 44, 43, 46, 47, 48, 45, 34, 33, 40, 39, 38, 37, 36, 35, 58, 59, 60, 61, 62, 63, 64, 49, 50, 51,
                        52, 53, 54, 55, 56, 57, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23,
                        22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, },
                { 44, 41, 42, 47, 48, 45, 46, 35, 34, 33, 40, 39, 38, 37, 36, 59, 60, 61, 62, 63, 64, 49, 50, 51, 52,
                        53, 54, 55, 56, 57, 58, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 32, 31, 30, 29, 28, 27, 26, 25, 24,
                        23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, },
                { 43, 42, 41, 48, 45, 46, 47, 36, 35, 34, 33, 40, 39, 38, 37, 60, 61, 62, 63, 64, 49, 50, 51, 52, 53,
                        54, 55, 56, 57, 58, 59, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 32, 31, 30, 29, 28, 27, 26, 25,
                        24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, },
                { 46, 47, 48, 41, 44, 43, 42, 37, 36, 35, 34, 33, 40, 39, 38, 61, 62, 63, 64, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 32, 31, 30, 29, 28, 27, 26,
                        25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, },
                { 45, 48, 47, 42, 41, 44, 43, 38, 37, 36, 35, 34, 33, 40, 39, 62, 63, 64, 49, 50, 51, 52, 53, 54, 55,
                        56, 57, 58, 59, 60, 61, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 32, 31, 30, 29, 28, 27,
                        26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, },
                { 48, 45, 46, 43, 42, 41, 44, 39, 38, 37, 36, 35, 34, 33, 40, 63, 64, 49, 50, 51, 52, 53, 54, 55, 56,
                        57, 58, 59, 60, 61, 62, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 32, 31, 30, 29, 28,
                        27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, },
                { 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 64, 49, 50, 51, 52, 53, 54, 55, 56, 57,
                        58, 59, 60, 61, 62, 63, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 32, 31, 30, 29,
                        28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, },
                { 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 33, 48, 47, 46, 45, 44, 43, 42, 41, 40,
                        39, 38, 37, 36, 35, 34, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 32, 31, 30,
                        29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, },
                { 49, 52, 51, 54, 55, 56, 53, 58, 59, 60, 61, 62, 63, 64, 57, 34, 33, 48, 47, 46, 45, 44, 43, 42, 41,
                        40, 39, 38, 37, 36, 35, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 32, 31,
                        30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, },
                { 52, 49, 50, 55, 56, 53, 54, 59, 60, 61, 62, 63, 64, 57, 58, 35, 34, 33, 48, 47, 46, 45, 44, 43, 42,
                        41, 40, 39, 38, 37, 36, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 32,
                        31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, },
                { 51, 50, 49, 56, 53, 54, 55, 60, 61, 62, 63, 64, 57, 58, 59, 36, 35, 34, 33, 48, 47, 46, 45, 44, 43,
                        42, 41, 40, 39, 38, 37, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1,
                        32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, },
                { 54, 55, 56, 49, 52, 51, 50, 61, 62, 63, 64, 57, 58, 59, 60, 37, 36, 35, 34, 33, 48, 47, 46, 45, 44,
                        43, 42, 41, 40, 39, 38, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2,
                        1, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, },
                { 53, 56, 55, 50, 49, 52, 51, 62, 63, 64, 57, 58, 59, 60, 61, 38, 37, 36, 35, 34, 33, 48, 47, 46, 45,
                        44, 43, 42, 41, 40, 39, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3,
                        2, 1, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, },
                { 56, 53, 54, 51, 50, 49, 52, 63, 64, 57, 58, 59, 60, 61, 62, 39, 38, 37, 36, 35, 34, 33, 48, 47, 46,
                        45, 44, 43, 42, 41, 40, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5,
                        4, 3, 2, 1, 32, 31, 30, 29, 28, 27, 26, 25, 24, },
                { 55, 54, 53, 52, 51, 50, 49, 64, 57, 58, 59, 60, 61, 62, 63, 40, 39, 38, 37, 36, 35, 34, 33, 48, 47,
                        46, 45, 44, 43, 42, 41, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6,
                        5, 4, 3, 2, 1, 32, 31, 30, 29, 28, 27, 26, 25, },
                { 58, 59, 60, 61, 62, 63, 64, 49, 56, 55, 54, 53, 52, 51, 50, 41, 40, 39, 38, 37, 36, 35, 34, 33, 48,
                        47, 46, 45, 44, 43, 42, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7,
                        6, 5, 4, 3, 2, 1, 32, 31, 30, 29, 28, 27, 26, },
                { 57, 60, 59, 62, 63, 64, 61, 50, 49, 56, 55, 54, 53, 52, 51, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33,
                        48, 47, 46, 45, 44, 43, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9,
                        8, 7, 6, 5, 4, 3, 2, 1, 32, 31, 30, 29, 28, 27, },
                { 60, 57, 58, 63, 64, 61, 62, 51, 50, 49, 56, 55, 54, 53, 52, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34,
                        33, 48, 47, 46, 45, 44, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,
                        9, 8, 7, 6, 5, 4, 3, 2, 1, 32, 31, 30, 29, 28, },
                { 59, 58, 57, 64, 61, 62, 63, 52, 51, 50, 49, 56, 55, 54, 53, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35,
                        34, 33, 48, 47, 46, 45, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11,
                        10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 32, 31, 30, 29, },
                { 62, 63, 64, 57, 60, 59, 58, 53, 52, 51, 50, 49, 56, 55, 54, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36,
                        35, 34, 33, 48, 47, 46, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12,
                        11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 32, 31, 30, },
                { 61, 64, 63, 58, 57, 60, 59, 54, 53, 52, 51, 50, 49, 56, 55, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37,
                        36, 35, 34, 33, 48, 47, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13,
                        12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 32, 31, },
                { 64, 61, 62, 59, 58, 57, 60, 55, 54, 53, 52, 51, 50, 49, 56, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38,
                        37, 36, 35, 34, 33, 48, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14,
                        13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 32, },
                { 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39,
                        38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15,
                        14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, }
        };

        assertArrayEquals(expected, dyv.getTabla());
    }



    /*
     * Caso 2 - Simplificacion Par-Impar
     */

     @Test
     public void testCaso2BasePar() {
             // Caso base: 2 jugadores
             DivideAndConquer dyv = new DivideAndConquer(2,2);
             dyv.DivideAndConquerCaso2(2);

             int[][] expected = {
                             { 2 },
                             { 1 },

             };

             imprimirTabla(dyv.getTabla());

             assertArrayEquals(expected, dyv.getTabla());
     }

    @Test
    public void testCaso2ImparConTresJugadores() {
            // Caso con 3 jugadores
            DivideAndConquer dyv = new DivideAndConquer(3,2);
            imprimirTabla(dyv.getTabla());

            dyv.DivideAndConquerCaso2(3);
            int[][] resultadoEsperado = {
                            { 2, 3, 0 },
                            { 1, 0, 3 },
                            { 0, 1, 2 }
            };

            imprimirTabla(dyv.getTabla());

            assertArrayEquals(resultadoEsperado, dyv.getTabla());
    }
    
    @Test
    public void testCaso2ParConSeisJugadores() {
            DivideAndConquer dyv = new DivideAndConquer(6,2);
            dyv.DivideAndConquerCaso2(6);

            int[][] expected = {
                            { 2, 3, 4, 5, 6 },
                            { 1, 5, 3, 6, 4 },
                            { 6, 1, 2, 4, 5 },
                            { 5, 6, 1, 3, 2 },
                            { 4, 2, 6, 1, 3 },
                            { 3, 4, 5, 2, 1 },

            };

            imprimirTabla(dyv.getTabla());

            assertArrayEquals(expected, dyv.getTabla());
    }

    @Test
    public void testCaso2ImparConSieteJugadores() {
            DivideAndConquer dyv = new DivideAndConquer(7,2);
            dyv.DivideAndConquerCaso2(7);

            int[][] expected = {
                            { 2, 3, 4, 5, 6, 7, 0 },
                            { 1, 4, 3, 6, 7, 0, 5 },
                            { 4, 1, 2, 7, 0, 5, 6 },
                            { 3, 2, 1, 0, 5, 6, 7 },
                            { 6, 7, 0, 1, 4, 3, 2 },
                            { 5, 0, 7, 2, 1, 4, 3 },
                            { 0, 5, 6, 3, 2, 1, 4 },
            };

            imprimirTabla(dyv.getTabla());
            
            assertArrayEquals(expected, dyv.getTabla());
    }
    
    @Test
    public void testCaso2ImparConNueveJugadores() {
            DivideAndConquer dyv = new DivideAndConquer(9,2);
            dyv.DivideAndConquerCaso2(9);

            int[][] expected = {
                            { 2, 3, 4, 5, 6, 7, 8, 9, 0 },
                            { 1, 5, 3, 7, 4, 8, 9, 0, 6 },
                            { 8, 1, 2, 4, 5, 9, 0, 6, 7 },
                            { 5, 9, 1, 3, 2, 0, 6, 7, 8 },
                            { 4, 2, 0, 1, 3, 6, 7, 8, 9 },
                            { 7, 8, 9, 0, 1, 5, 4, 3, 2 },
                            { 6, 0, 8, 2, 9, 1, 5, 4, 3 },
                            { 3, 6, 7, 9, 0, 2, 1, 5, 4 },
                            { 0, 4, 6, 8, 7, 3, 2, 1, 5 }
            };

            imprimirTabla(dyv.getTabla());

            assertArrayEquals(expected, dyv.getTabla());
    }
    

    @Test
    public void testCaso2ParConTreceJugadores() {
            DivideAndConquer dyv = new DivideAndConquer(13,2);
            dyv.DivideAndConquerCaso2(13);

            int[][] expected = {
                            { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 },
                            { 1, 4, 3, 6, 7, 9, 5, 10, 11, 12, 13, 0, 8 },
                            { 4, 1, 2, 7, 10, 5, 6, 11, 12, 13, 0, 8, 9 },
                            { 3, 2, 1, 11, 5, 6, 7, 12, 13, 0, 8, 9, 10 },
                            { 6, 7, 12, 1, 4, 3, 2, 13, 0, 8, 9, 10, 11 },
                            { 5, 13, 7, 2, 1, 4, 3, 0, 8, 9, 10, 11, 12 },
                            { 0, 5, 6, 3, 2, 1, 4, 8, 9, 10, 11, 12, 13 },
                            { 9, 10, 11, 12, 13, 0, 1, 7, 6, 5, 4, 3, 2 },
                            { 8, 11, 10, 13, 0, 2, 12, 1, 7, 6, 5, 4, 3 },
                            { 11, 8, 9, 0, 3, 12, 13, 2, 1, 7, 6, 5, 4  },
                            { 10, 9, 8, 4, 12, 13, 0, 3, 2, 1, 7, 6, 5  },
                            { 13, 0, 5, 8, 11, 10, 9, 4, 3, 2, 1, 7, 6  },
                            { 12, 6, 0, 9, 8, 11, 10, 5, 4, 3, 2, 1, 7  },

            };

            imprimirTabla(dyv.getTabla());

            assertArrayEquals(expected, dyv.getTabla());
    }
    
    @Test
    public void testCaso2ConQuinceJugadores() {
            DivideAndConquer dyv = new DivideAndConquer(15,2);
            dyv.DivideAndConquerCaso2(15);

            int[][] expected = {
                            { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, },
                            { 1, 4, 3, 6, 7, 8, 5, 10, 11, 12, 13, 14, 15, 0, 9, },
                            { 4, 1, 2, 7, 8, 5, 6, 11, 12, 13, 14, 15, 0, 9, 10, },
                            { 3, 2, 1, 8, 5, 6, 7, 12, 13, 14, 15, 0, 9, 10, 11, },
                            { 6, 7, 8, 1, 4, 3, 2, 13, 14, 15, 0, 9, 10, 11, 12, },
                            { 5, 8, 7, 2, 1, 4, 3, 14, 15, 0, 9, 10, 11, 12, 13, },
                            { 8, 5, 6, 3, 2, 1, 4, 15, 0, 9, 10, 11, 12, 13, 14, },
                            { 7, 6, 5, 4, 3, 2, 1, 0, 9, 10, 11, 12, 13, 14, 15, },
                            { 10, 11, 12, 13, 14, 15, 0, 1, 8, 7, 6, 5, 4, 3, 2, },
                            { 9, 12, 11, 14, 15, 0, 13, 2, 1, 8, 7, 6, 5, 4, 3, },
                            { 12, 9, 10, 15, 0, 13, 14, 3, 2, 1, 8, 7, 6, 5, 4, },
                            { 11, 10, 9, 0, 13, 14, 15, 4, 3, 2, 1, 8, 7, 6, 5, },
                            { 14, 15, 0, 9, 12, 11, 10, 5, 4, 3, 2, 1, 8, 7, 6, },
                            { 13, 0, 15, 10, 9, 12, 11, 6, 5, 4, 3, 2, 1, 8, 7, },
                            { 0, 13, 14, 11, 10, 9, 12, 7, 6, 5, 4, 3, 2, 1, 8, }
            };

            imprimirTabla(dyv.getTabla());
            
            assertArrayEquals(expected, dyv.getTabla());
    }



    /*
     * Caso 3
     */
    @Test
    public void testCaso1Baseb() {
        // Caso base: 2 jugadores
        DivideAndConquer dyv = new DivideAndConquer(2,3);
        dyv.DivideAndConquer1b(1,2);

        int[][] resultadoEsperado = { { 2, 1 } };
        int[][] resultadoObtenido = dyv.getTabla();

        imprimirTabla(resultadoObtenido);

        assertArrayEquals(resultadoEsperado, resultadoObtenido);
    }

    @Test
    public void testCaso1ConCuatroJugadoresRecursivo() {


        DivideAndConquer dyv = new DivideAndConquer(4, 3);
        dyv.DivideAndConquer1b(1 , 4);

        int[][] expected = {
                { 2, 1, 4, 3},
                { 3, 4, 1, 2},
                { 4, 3, 2, 1},

        };

        // imprimirTablaCaso1Recursivo(A);

        assertArrayEquals(expected, dyv.getTabla());
    }

    @Test
    public void testCaso1ConOchoJugadoresRecursivo() {

        DivideAndConquer dyv = new DivideAndConquer(8, 3);
        dyv.DivideAndConquer1b(1 , 8);

        int[][] expected = {
                { 2, 1, 4, 3, 6, 5, 8 , 7},
                { 3, 4, 1, 2, 7, 8, 5 , 6},
                { 4, 3, 2, 1, 8, 7, 6 , 5},
                { 5, 6, 7, 8, 1, 2, 3 , 4},
                { 6, 7, 8, 5, 4, 1, 2 , 3},
                { 7, 8, 5, 6, 3, 4, 1 , 2},
                { 8, 5, 6, 7, 2, 3, 4 , 1},
        };
        // imprimirTablaCaso1Recursivo(A);

        assertArrayEquals(expected, dyv.getTabla());
    }


    @Test
    public void testCaso1ConDieciseisJugadoresRecursivo() {

        DivideAndConquer dyv = new DivideAndConquer(16, 3);
        dyv.DivideAndConquer1b(1 , 16);


        int[][] expected = {
                { 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15 },
                { 3, 4, 1, 2, 7, 8, 5, 6, 11, 12, 9, 10, 15, 16, 13, 14 },
                { 4, 3, 2, 1, 8, 7, 6, 5, 12, 11, 10, 9, 16, 15, 14, 13 },
                { 5, 6, 7, 8, 1, 2, 3, 4, 13, 14, 15, 16, 9, 10, 11, 12 },
                { 6, 7, 8, 5, 4, 1, 2, 3, 14, 15, 16, 13, 12, 9, 10, 11 },
                { 7, 8, 5, 6, 3, 4, 1, 2, 15, 16, 13, 14, 11, 12, 9, 10 },
                { 8, 5, 6, 7, 2, 3, 4, 1, 16, 13, 14, 15, 10, 11, 12, 9 },
                { 9, 10, 11, 12, 13, 14, 15, 16, 1, 2, 3, 4, 5, 6, 7, 8 },
                { 10, 11, 12, 13, 14, 15, 16, 9, 8, 1, 2, 3, 4, 5, 6, 7 },
                { 11, 12, 13, 14, 15, 16, 9, 10, 7, 8, 1, 2, 3, 4, 5, 6 },
                { 12, 13, 14, 15, 16, 9, 10, 11, 6, 7, 8, 1, 2, 3, 4, 5 },
                { 13, 14, 15, 16, 9, 10, 11, 12, 5, 6, 7, 8, 1, 2, 3, 4 },
                { 14, 15, 16, 9, 10, 11, 12, 13, 4, 5, 6, 7, 8, 1, 2, 3 },
                { 15, 16, 9, 10, 11, 12, 13, 14, 3, 4, 5, 6, 7, 8, 1, 2 },
                { 16, 9, 10, 11, 12, 13, 14, 15, 2, 3, 4, 5, 6, 7, 8, 1 }
            };
            
        // imprimirTablaCaso1Recursivo(dyv.getTabla());

        assertArrayEquals(expected, dyv.getTabla());
    }

    public void imprimirTabla(int[][] tabla) {
        System.out.println("                       dias dias");
        for (int i = 0; i < tabla.length; i++) {
            System.out.print("jugadores: " + i + "|         ");
            for (int j = 0; j < tabla[i].length; j++) {
                System.out.print(tabla[i][j] + " ");
            }
            System.out.println();
        }
    }

    public void imprimirTablaCaso1Recursivo(int[][] tabla) {
        System.out.println("             jugadores jugadores");
        for (int i = 0; i < tabla.length; i++) {
            System.out.print("dias: " + i + "|         ");
            for (int j = 0; j < tabla[i].length; j++) {
                System.out.print(tabla[i][j] + " ");
            }
            System.out.println();
        }
    }


}
